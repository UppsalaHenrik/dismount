mean(c(1))
mean(c(1, 2))
mean(c(1, NAN))
mean(c(1, NaN))
mean(c(1, NULL))
mean(c(1, NA))
mean(c(1,2,NULL))
mean(c(1,2,NA))
mean(c(1,2,"NA"))
mean(c(1,2,NaN))
NULL/5
NULL/5
NULL/1.52324
NULL*1.52324
print(NULL)
length(NULL/5)
length(NULL/5)
length(0/5)
length(NULL/5)
rawresInputList <- createRawresInput("run111_FOCEI_8_retry533_LAPLACE.mod", paramsToCompare = c("THETA1","OMEGA(2,2)"), resol = 12, lims1 = c(-10.363,-10.373), lims2 = c(0.00795018,0.00795045))
lala <- "C:\Program Files (x86)\WANdisco\Subversion\Apache2\bin;C:\Program Files (x86)\WANdisco\Subversion;C:\RBuildTools\3.1\bin;C:\RBuildTools\3.1\gcc-4.6.3\bin;C:\Perl64\site\bin;C:\Perl64\bin;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\R\R-3.0.0\library\rJava\jre\bin\client;C:\Program Files (x86)\R\R-3.0.0\library\rJava\jre\bin;C:\Program Files (x86)\R\R-3.0.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\Program Files (x86)\PuTTY\;C:\Program Files\TortoiseSVN\bin;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\Kaspersky Lab\Kaspersky Endpoint Security 10 for Windows\;C:\nm73g64\run\;C:\Program Files (x86)\MiKTeX 2.9\miktex\bin\;C:\Program Files\wkhtmltopdf\bin;C:\nm73g64\run;C:\ProgramData\Monolix\Monolix432s\bin\;C:\Program Files (x86)\Skype\Phone\"
install.packages("mlxR")
library(mlxR)
myModel <- inlineModel("
[LONGITUDINAL]
input = {ka, V, Cl}
EQUATION:
C = pkmodel(ka,V,Cl)
[INDIVIDUAL]
input = {ka_pop, V_pop, Cl_pop, omega_ka, omega_V, omega_Cl}
DEFINITION:
ka = {distribution=lognormal, reference=ka_pop, sd=omega_ka}
V = {distribution=lognormal, reference=V_pop, sd=omega_V }
Cl = {distribution=lognormal, reference=Cl_pop, sd=omega_Cl}
")
N=2000
pop.param <- c(
ka_pop = 1, omega_ka = 0.5,
V_pop = 10, omega_V = 0.4,
Cl_pop = 1, omega_Cl = 0.3)
res <- simulx(model = myModel,
parameter = pop.param,
treatment = list(time=0, amount=100),
group = list(size=N, level=
'
individual
'
),
output = list(name=
'
C
'
, time=seq(0,24,by=0.1)))
c(1,2,3,"lala")
class(c(1,2,3,"lala"))
class(c(1,2,3,""))
class(c(1,2,3))
dismountRawresPath
?combn
print("lala")
sapply(lala, function(x){print("lala")})
lala
lala <- 1
sapply(lala, function(x){print("lala")})
lala <- 5
sapply(lala, function(x){print("lala")})
sapply(lala, function(x){print(paste("lala", lala)})
sapply(lala, function(x){print(paste("lala", lala))})
lala <- c(5, 10)
sapply(lala, function(x){print(paste("lala", lala))})
sapply(lala, function(x){print(paste("lala", x))})
lapply(lala, function(x){print(paste("lala", x))})
apply(lala, 1,function(x){print(paste("lala", x))})
apply(lala, 2,function(x){print(paste("lala", x))})
apply(lala, function(x){print(paste("lala", x))})
vapply(lala, function(x){print(paste("lala", x))})
vapply(lala, function(x){print(paste("lala", x))}, FUN.VALUE = 1)
lapply(lala, function(x){print(paste("lala", x))})
lapply(lala, function(x){print(paste("lala", x))})[1]
lapply(lala, function(x){print(paste("lala", x))})[2]
lapply(lala, function(x){print(paste("lala", x))})[[1]]
lapply(lala, function(x){print(paste("lala", x))})[[2]]
lapply(lala, function(x){return(print(paste("lala", x)))})[[2]]
lapply(lala, function(x){return(print(paste("lala", x)))})
lapply(lala, function(x){return(print(paste("lala", x)))})
blah = 0
lapply(lala, function(x){
return(print(paste("lala", x)))
})
lapply(lala, function(x){
blah <- blah + 1
return(print(paste("lala", x)))
})
blah
lapply(lala, function(x){
blah <- blah + 1
return(print(paste("lala", x, blah)))
})
llapply
lapply
dismountPertDir <- c(0,1)
paste0("dismountRuns_pertDir_", dismountPertDir)
a = data.frame(ID = 1:4, ofv = rnorm(4))
b = data.frame(ID = 1:4, ofv = rnorm(4))
a
b
merge(a, b)
merge(a, b, by = ID)
merge(a, b, by = 'ID')
c = merge(a, b, by = 'ID')
pmin(c[, 2], c[, 3])
?pmin
a = data.frame(ID = 1:4, ofv = abs(rnorm(4)))
b = data.frame(ID = 1:4, ofv = abs(rnorm(4)))
a
b
c = merge(a, b, by = 'ID')
c
pmin(c[, 2], c[, 3])
c = merge(a, b, by = 'ID', all = TRUE)
c
c[3,3] <- NA
c
pmin(c[, 2], c[, 3])
pmin(c[, 2], c[, 3], na.rm = TRUE)
dismountOFVsList
dismountOFVsList <- list(a,b)
dismountOfvsList
dismountOfvsList <- list(a,b)
dismountOfvPairs <- Reduce(function(...) merge(..., by = "retry", all = TRUE),
dismountOfvsList)
dismountOfvsList
a = data.frame(retry = 1:4, ofv = abs(rnorm(4)))
b = data.frame(retry = 1:4, ofv = abs(rnorm(4)))
dismountOfvsList <- list(a,b)
dismountOfvPairs <- Reduce(function(...) merge(..., by = "retry", all = TRUE),
dismountOfvsList)
dismountOfvPairs
dismountOfvs <- pmin(dismountOfvPairs$ofv.x, dismountOfvPairs$ofv.y,
na.rm = TRUE)
dismountOfvs
dismountOfvs <- data.frame(dismountOfvPairs$retry,
pmin(dismountOfvPairs$ofv.x,
dismountOfvPairs$ofv.y,
na.rm = TRUE))
dismountOfvs
data.frame(dismountOfvPairs$retry,
pmin(dismountOfvPairs$ofv.x,
dismountOfvPairs$ofv.y,
na.rm = TRUE),
check.names = FALSE)
data.frame(dismountOfvPairs$retry,
pmin(dismountOfvPairs$ofv.x,
dismountOfvPairs$ofv.y,
na.rm = TRUE),
names = c("retry", "ofv"))
names(dismountOfvs) = c("retry", "ofv")
dismountOfvs
library(roxygen2)
getwd()
setwd("C:/Users/hnyberg/Dropbox/Doktorandsaker/PrecondProject/Scripts/dismount")
roxygenise()
roxygenise()
retryFilePaths
70902.5/603.75
117.4369/7.5
603.75/7.5
70902.5/80.5
#' Run dismount (isestimable)
#'
#' Runs dismount (aka isestimable). Currently limited to slurm queue submission.
#' This function is in need of some TLC.
#'
#' @param dismountPath Path to the isestimable/dismount
#' @param modelFileName The name of the model file. No default
#' @param wait Wraps the wait option in system(), which specifies whether to
#' wait for the system call to complete before continuing in R (TRUE) or not
#' wait after submission (FALSE). Default is FALSE
#' @param pertDir Perturbation direction. 1 for standard and 0 (or any other) for opposite
#' @param logging Whether to log the command line outputs to a text file or not. Default is FALSE.
#'
#' runDismount()
#'
#'
#' @export
#'
#' @author Henrik BjugÃ¥rd Nyberg - henrik.b.nyberg@@farmbio.uu.se
# I should rewrite this better... para retries run function would be the example to look at
runDismount <- function(modelFileName, dismountPath = paste0("/blue/home/USER/",
"yasao745/PsN4_4_ver_YA/",
"bin/isestimable"),
wait = FALSE, pertDir = 1, logging = FALSE, runOnSlurm = FALSE){
# Wait for the SLURM queue to have less than 100 runs in it
waitForSlurmQ(targetLength=100, secsToWait=5, maxWaits=12)
if(logging){
logOpt <- paste0(" > ", dir, "_log.txt 2>&1")
}else{
logOpt <- ""
}
if(runOnSlurm){
runOnSlurmOpt <- paste0(" -run_on_slurm")
}else{
runOnSlurmOpt <- ""
}
modelFileNameNoExt <- sub("\\.[[:alnum:]]+$", "", basename(as.character(modelFileName)))
dir <- paste("dismount", modelFileNameNoExt, sep = "_")
cmd <- paste0("perl ", dismountPath, " ",
basename(as.character(modelFileName)), " -dir=", dir, runOnSlurmOpt,
"-run_on_slurm -pertDir=", pertDir, logOpt)
# Print the command to command line
print(cmd)
# Run the command
system(cmd, intern = FALSE, wait = wait)
# Sleep a tenth of a second to not overload the system.
Sys.sleep(0.1)
return(dir)
}
getwd()
roxygenise()
roxygenise()
?grep
dismountRetry
dismountRetry <- NA
dismountRetry
if(dismountRetry == NA){
dismountRetry <- 0
}
dismountRetry
if(is.na(dismountRetry)){
dismountRetry <- 0
}
dismountRetry
dismountRetry <- c(NA,1,2,3)
dismountRetry
sapply(dismountRetry, function(x){
if(is.na(x)){
dismountRetry <- 0
}
})
dismountRetry
sapply(dismountRetry, function(x){
if(is.na(x)){
x <- 0
}
})
class(dismountRetry)
for(i in seq_along(dismountRetry)){
if(is.na(dismountRetry[i])){
dismountRetry[i] <- 0
}
})
for(i in seq_along(dismountRetry)){
if(is.na(dismountRetry[i])){
dismountRetry[i] <- 0
}
}
dismountRetry
roxygenise()
