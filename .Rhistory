scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis"))
)
plotly_POST(p, fileopt = "overwrite")
p <- plot_ly(x = paramVector2,
y = paramVector1,
z = ofvMatrix,
type = "surface",
text = labelMatrix
) %>%
add_trace(x =0, y = 0, z = 0,
type = "scatter3d",
marker = list(opacity = 0.7,
color = "red3"
)
) %>%
layout(title = "Main title",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
)
plotly_POST(p, fileopt = "overwrite")
p <- plot_ly(x = paramVector2,
y = paramVector1,
z = ofvMatrix,
type = "surface",
text = labelMatrix
) %>%
add_trace(x =0, y = 0, z = 0,
type = "scatter3d",
marker = list(opacity = 0.7,
color = "#FF0000"
)
) %>%
layout(title = "Main title",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
)
plotly_POST(p, fileopt = "overwrite")
p <- plot_ly(x = paramVector2,
y = paramVector1,
z = ofvMatrix,
type = "surface",
text = labelMatrix
) %>%
add_trace(x =0, y = 0, z = 0,
type = "scatter3d",
marker = list(opacity = 0.5,
color = "#FF0000"
)
) %>%
layout(title = "Main title",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
)
plotly_POST(p, fileopt = "overwrite")
p <- plot_ly(x = paramVector2,
y = paramVector1,
z = ofvMatrix,
type = "surface",
text = labelMatrix
) %>%
add_trace(x =0, y = 0, z = 0,
type = "scatter3d",
marker = list(opacity = 0.65,
color = "#FF0000"
)
) %>%
layout(title = "Main title",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
)
plotly_POST(p, fileopt = "overwrite")
p <- plot_ly(x = paramVector2,
y = paramVector1,
z = ofvMatrix,
type = "surface",
text = labelMatrix
) %>%
add_trace(x =0, y = 0, z = 0,
type = "scatter3d",
marker = list(opacity = 0.65,
color = "#FF0000",
symbol = "x"
)
) %>%
layout(title = "Main title",
scene = list(
xaxis = list(title = "X Axis"),
yaxis = list(title = "Y Axis"),
zaxis = list(title = "Z Axis")
)
)
roxyroxygenise()
roxygenise()
ofvVector
plotlyObj
p
library(plotly)
plotly::last_plot()
Sys.getenv("plotly_domain")
paramsToCompare = c("THETA1", "THETA2")
lims1 = c(0.99*as.numeric(paramVector[paramsToCompare[1]]),
1.01*as.numeric(paramVector[paramsToCompare[1]])),
lims2 = c(0.99*as.numeric(paramVector[paramsToCompare[2]]),
1.01*as.numeric(paramVector[paramsToCompare[2]]))
if(paramValue1[[1]] > lims1[1] && paramValue1[[1]] < lims1[2]){
# Determine how far along the vector the paramValue should be for param 1 (X)
frac1 <- round((paramValue1[[1]]-lims1[1])/(lims1[2]-lims1[1]),
digits = ceiling(log10(resol)))
lowSeq1 <- seq(from = lims1[1], to = paramValue1[[1]],
length.out = round(frac1*resol))
uppSeq1 <- seq(from = paramValue1[[1]], to = lims1[2],
length.out = 1 + resol - round(frac1*resol))[-1]
paramValsList[[paramsToCompare[1]]] <- c(lowSeq1, uppSeq1)
}else{
paramValsList[[paramsToCompare[1]]] <- seq(from = lims1[1],
to = paramValue1[[1]],
length.out = resol)
}
lims1 <- c(1,4)
paramValue1[[1]]
paramValue1[[1]] <- 5
paramVector
dismountWD <- getwd()
setwd("C:/Users/hnyberg/Dropbox/Doktorandsaker/PrecondProject/LikelihoodSurface/plotlyTestJonsson")
modFilePath <- "run111_FOCEI_8_retry533_FO_LAPLACE.mod"
paramsToCompare = c("THETA1", "THETA2")
paramsToCompare = c("THETA1", "OMEGA(2,2)")
resol = 10
modFileNameNoExt <- sub("\\.[[:alnum:]]+$", "", basename(as.character(modFilePath)))
extFileName <- paste0(modFileNameNoExt, ".ext")
extFileDFList <- parseExtFile(extFileName)
# Get the last table in the ext file
install.packages(dismountWD, repos = NULL)
install.packages(dismountWD, repos = NULL, type = "source")
library(dismount)
print("No .ext file found for the")
modFileNameNoExt <- sub("\\.[[:alnum:]]+$", "", basename(as.character(modFilePath)))
extFileName <- paste0(modFileNameNoExt, ".ext")
if(!file.exists(extFileName)){
print("No .ext file found for this model. Please run it first")
break()
}
extFileDFList <- parseExtFile(extFileName)
Get the last table in the ext file
extFileDF <- extFileDFList[[length(extFileDFList)]]
# Pick out the final parameter values row
paramVectorRow <- subset(extFileDF, ITERATION == -1e+9)
# Pick out the OBJ values and package it with the original values of paramsToCompare
origParamsAndOFV <- cbind(paramVectorRow[paramsToCompare],
paramVectorRow[length(paramVectorRow)])
# Ignoring the first and last column (Iteration and OBJ)
paramVectorFull <- paramVectorRow[2:(length(paramVectorRow)-1)]
# Getting the columns for the different parameter types so that I can reorder and remove unnecessary ones
thetaCols <- grep("THETA", names(paramVectorFull))
omegaCols <- grep("OMEGA", names(paramVectorFull))
sigmaCols <- grep("SIGMA", names(paramVectorFull))
# Reordering to fit PsN standard with SIGMA last.
paramVectorFull <- paramVectorFull[c(thetaCols, omegaCols, sigmaCols)]
### Getting rid of zero value off-diagonal elements. This is required for PsN rawres_input
# First some more or less dodgy regex
indices <- gsub("SIGMA", "", names(paramVectorFull))
indices <- gsub("OMEGA", "", indices)
indices <- gsub("\\(", "", indices)
indices <- gsub("\\)", "", indices)
# Spliting the two numbers
indicesList <- strsplit(indices, ",")
# Checking if they are off-diagonal sigmas/omegas
paramVectorOffDiags <- unlist(sapply(indicesList, function(x){
# If the indices do not match and the value isn't NA (catches THETAs) then it is an
# off/diagonal sigma or omega and I set TRUE
y <- ifelse(x[1] != x[2] && !is.na(x[2]), TRUE, FALSE)
return(y)
}), recursive = FALSE)
# Check if they are also zero. I seem to be messing up the names here. I'm reducing
# this to a vector so that naming in the next step is taken from paramVectorFull
paramVectorOffDiagZeroes <- c(paramVectorOffDiags & paramVectorFull == 0)
# Finally we have the PsN compatible
paramVector <- paramVectorFull[!paramVectorOffDiagZeroes]
# Picking out the relevant parameters
paramValue1 <- paramVector[paramsToCompare[1]]
paramValue2 <- paramVector[paramsToCompare[2]]
paramValsList <- list()
# Check if the original data is withi
paramValue1[[1]]
if(paramValue1[[1]] > lims1[1] && paramValue1[[1]] < lims1[2]){
# Determine how far along the vector the paramValue should be for param 1 (X)
frac1 <- round((paramValue1[[1]]-lims1[1])/(lims1[2]-lims1[1]),
digits = ceiling(log10(resol)))
lowSeq1 <- seq(from = lims1[1], to = paramValue1[[1]],
length.out = round(frac1*resol))
uppSeq1 <- seq(from = paramValue1[[1]], to = lims1[2],
length.out = 1 + resol - round(frac1*resol))[-1]
paramValsList[[paramsToCompare[1]]] <- c(lowSeq1, uppSeq1)
}else{
paramValsList[[paramsToCompare[1]]] <- seq(from = lims1[1],
to =lims1[2],
length.out = resol)
}
paramValsList[[paramsToCompare[1]]]
lims1 <- c(1,14)
if(paramValue1[[1]] > lims1[1] && paramValue1[[1]] < lims1[2]){
# Determine how far along the vector the paramValue should be for param 1 (X)
frac1 <- round((paramValue1[[1]]-lims1[1])/(lims1[2]-lims1[1]),
digits = ceiling(log10(resol)))
lowSeq1 <- seq(from = lims1[1], to = paramValue1[[1]],
length.out = round(frac1*resol))
uppSeq1 <- seq(from = paramValue1[[1]], to = lims1[2],
length.out = 1 + resol - round(frac1*resol))[-1]
paramValsList[[paramsToCompare[1]]] <- c(lowSeq1, uppSeq1)
}else{
paramValsList[[paramsToCompare[1]]] <- seq(from = lims1[1],
to =lims1[2],
length.out = resol)
}
paramValsList[[paramsToCompare[1]]]
lims1[1]
lims1[2]
paramValue1[[1]]
paramValue1[[1]] < lims1[2]
paramValue1[[1]] > lims1[1]
lims1[1]
paramValue1[[1]]
lims1[1]
lims1 <- c(-14,1)
paramValue1[[1]] > lims1[1] && paramValue1[[1]] < lims1[2]
if(paramValue1[[1]] > lims1[1] && paramValue1[[1]] < lims1[2]){
# Determine how far along the vector the paramValue should be for param 1 (X)
frac1 <- round((paramValue1[[1]]-lims1[1])/(lims1[2]-lims1[1]),
digits = ceiling(log10(resol)))
lowSeq1 <- seq(from = lims1[1], to = paramValue1[[1]],
length.out = round(frac1*resol))
uppSeq1 <- seq(from = paramValue1[[1]], to = lims1[2],
length.out = 1 + resol - round(frac1*resol))[-1]
paramValsList[[paramsToCompare[1]]] <- c(lowSeq1, uppSeq1)
}else{
paramValsList[[paramsToCompare[1]]] <- seq(from = lims1[1],
to =lims1[2],
length.out = resol)
}
paramValsList[[paramsToCompare[1]]]
paramValue2[[1]]
lims2[1]
lims2 <- c(0.000001, 0.1)
if(paramValue2[[1]] > lims2[1] && paramValue2[[1]] < lims2[2]){
frac2 <- round((paramValue2[[1]]-lims2[1])/(lims2[2]-lims2[1]),
digits = ceiling(log10(resol)))
lowSeq2 <- seq(from = lims2[1], to = paramValue2[[1]],
length.out = round(frac2*resol))
uppSeq2 <- seq(from = paramValue2[[1]], to = lims2[2],
length.out = 1 + resol - round(frac2*resol))[-1]
paramValsList[[paramsToCompare[2]]] <- c(lowSeq2, uppSeq2)
}else{
paramValsList[[paramsToCompare[1]]] <- seq(from = lims2[1],
to = lims2[2],
length.out = resol)
}
paramValsList[[paramsToCompare[1]]]
paramValue2[[1]] > lims2[1] && paramValue2[[1]] < lims2[2]
paramValsList[[paramsToCompare[2]]]
getwd()
testWD <- getwd()
setwd(dismountWD)
roxygenise
roxygenise()
library(roxygen2)
roxygenise()
paramsToCompare
xParamVals
paramValsList
paramValue1
origParamsAndOFV
origParamsAndOFV[1]
origParamsAndOFV[[1]]
rawresInputList[[4]]
rawresInputList[[4]] <- origParamsAndOFV
rawresInputList <- list()
rawresInputList[[4]] <- origParamsAndOFV
rawresInputList[[4]]
origVals <- rawresInputList[[4]]
origVals[1]
ofvVector
ofvVector <- c(-2030, -2029, -2028)
origParamsAndOFV
origVals
origOfv <- origVals[[3]]
origOfv
ofvVector
labelVector <- paste("OFV =", format(ofvVector, digits = 2))
ofvScaling
ofvScaling <- TRUE
if(ofvScaling){
# Subtract smallest number
ofvVector <- ofvVector - min(ofvVector)
origOfv <- origOfv - min(ofvVector)
# Calculate a scaling factor that brings the smallest non-zero number up
ofvScalingFactor <- 10^abs(min(log10(ofvVector[ofvVector > 0])))
# Scale it so that the numbers become easier to handle
ofvVector <- ofvVector * ofvScalingFactor
origOfv <- origOfv * ofvScalingFactor
# Scale it to a fraction of the maximum
ofvVector <- ofvVector/max(ofvVector)
origOfv <- origOfv/max(ofvVector)
# Change the z axis label
zlab = paste0(zlab, ", scaled")
}
zlab
zlab <- "OFV"
if(ofvScaling){
# Subtract smallest number
ofvVector <- ofvVector - min(ofvVector)
origOfv <- origOfv - min(ofvVector)
# Calculate a scaling factor that brings the smallest non-zero number up
ofvScalingFactor <- 10^abs(min(log10(ofvVector[ofvVector > 0])))
# Scale it so that the numbers become easier to handle
ofvVector <- ofvVector * ofvScalingFactor
origOfv <- origOfv * ofvScalingFactor
# Scale it to a fraction of the maximum
ofvVector <- ofvVector/max(ofvVector)
origOfv <- origOfv/max(ofvVector)
# Change the z axis label
zlab = paste0(zlab, ", scaled")
}
origOfv
origOfv <- origVals[[3]]
origOfv
min(ofvVector)
ofvVector
ofvScalingFactor
origOfv
origOfv <- origOfv - min(ofvVector)
origOfv
ofvVector <- c(-2030, -2029, -2028)
origOfv <- origVals[[3]]
origOfv
ofvVector
if(ofvScaling){
# Subtract smallest number
origOfv <- origOfv - min(ofvVector)
ofvVector <- ofvVector - min(ofvVector)
# Calculate a scaling factor that brings the smallest non-zero number up
ofvScalingFactor <- 10^abs(min(log10(ofvVector[ofvVector > 0])))
# Scale it so that the numbers become easier to handle
ofvVector <- ofvVector * ofvScalingFactor
origOfv <- origOfv * ofvScalingFactor
# Scale it to a fraction of the maximum
origOfv <- origOfv/max(ofvVector)
ofvVector <- ofvVector/max(ofvVector)
# Change the z axis label
zlab = paste0(zlab, ", scaled")
}
origOfv
ofvVector
origVals[[3]]
ofvVector <- c(-2030, -2029, -2028)
if(ofvScaling){
# Subtract smallest number
origOfv <- origOfv - min(ofvVector)
ofvVector <- ofvVector - min(ofvVector)
# Calculate a scaling factor that brings the smallest non-zero number up
ofvScalingFactor <- 10^abs(min(log10(ofvVector[ofvVector > 0])))
# Scale it so that the numbers become easier to handle
ofvVector <- ofvVector * ofvScalingFactor
origOfv <- origOfv * ofvScalingFactor
# Scale it to a fraction of the maximum
origOfv <- origOfv/max(ofvVector)
ofvVector <- ofvVector/max(ofvVector)
# Change the z axis label
zlab = paste0(zlab, ", scaled")
}
origOfv
ofvVector
origOfv <- origVals[[3]]
ofvVector <- c(-2030, -2029, -2028)
origOfv <- origOfv - min(ofvVector)
origOfv
ofvVector <- ofvVector - min(ofvVector)
ofvVector
ofvScalingFactor <- 10^abs(min(log10(ofvVector[ofvVector > 0])))
ofvScalingFactor
ofvVector <- ofvVector * ofvScalingFactor
ofvVector
origOfv <- origOfv * ofvScalingFactor
origOfv
ofvScalingFactor
origOfv <- origOfv/max(ofvVector)
origOfv
ofvVector <- ofvVector/max(ofvVector)
ofvVector
origVals[[3]]
origVals
class(origVals)
paste0("\<b>OFV Surface for ", modFilePath, "</b><br>", resol, "x", resol,
"resolution. Retries folder ", dirName)
resol
dirName
dirName <- "lalaDir"
modFilePath
plotTitle <- paste0("\\<b>OFV Surface for ", modFilePath, "</b><br>", resol, "x", resol,
"resolution. Retries folder ", dirName)
paste0("\\<b>OFV Surface for ", modFilePath, "</b><br>", resol, "x", resol,
"resolution. Retries folder ", dirName)
?format
format(-2029.213456)
format(-2029.213456, digits = 2)
format(-2029.213456, digits = 4)
format(-2029.213456, digits = 10)
format(-2029.213456, digits = 6)
getwd()
lala <- function(...){paste(...)}
lala("hej", jaja = "lalal")
lala("hej", jaja = "lalal", setting = c(2,192873))
?flatten
setwd("C:\Users\hnyberg\Dropbox\Doktorandsaker\PrecondProject\LikelihoodSurface\plotlyTestJonsson\saddleCandidates\para_retries_160421_164550")
setwd("C:/Users/hnyberg/Dropbox/Doktorandsaker/PrecondProject/LikelihoodSurface/plotlyTestJonsson/saddleCandidates/para_retries_160421_164550")
install_github("Uppsalahenrik/dismount")
library(devtools)
install_github("Uppsalahenrik/dismount")
extFilePath
extFilePath <- "new_run111_FOCEI_8_retry533_LAPLACE.ext"
# Check to make sure the referenced file exists
if (!file.exists(extFilePath)) {
stop("Failed to parse ext file; expected input file \"",
extFilePath, "\" does not exist.")
}
rawExtFile <- readLines(extFilePath)
# Pick out the separate tables. I include the last row in the vector to know where to stop.
tableRows <- grep("TABLE", rawExtFile)
tableAndLastRows <- c(tableRows, length(rawExtFile))
noTables <- length(tableRows)
# Extracting the table number and method name as names for the tables. Regex is not perfect here,
# but does work in all the examples I've looked at.
tableNames <- gsub("\\(.+$", "", rawExtFile[tableRows])
tableNames <- gsub("\\s\\s+", "", tableNames)
tableNames <- gsub("\\s+$", "", tableNames)
# Create a list of dataframes with each
tableList <- lapply(1:noTables, function(x){
# Read in the numeric portion of this table, ignoring the title and header rows
table <- rawExtFile[(tableAndLastRows[x]+2):(tableAndLastRows[x+1]-1)]
# Extract the header
header <- unlist(strsplit(gsub("^\\s+", "", rawExtFile[(tableAndLastRows[x]+1)]), "\\s+"))
# Remove leading whitespace
table <- gsub("^\\s+", "", table)
# Separate the values (still as char strings)
tableCharDF <- data.frame(do.call("rbind", strsplit(table, "\\s+")),
stringsAsFactors = FALSE)
# Set the header
names(tableCharDF) <- header
# Convert to numerics
tableDF <- as.data.frame(sapply(tableCharDF, as.numeric))
return(tableDF)
})
# Set names of the separate tables
names(tableList) <- tableNames
tableList
tableList[1]
tableList[1]["THETA1"]
tableList[1][["THETA1"]]
tableList[[1]]["THETA1"]
tableList[[1]]["THETA1"][1]
tableList[[1]]["THETA1"][[1]
]
tableList[[1]]["THETA1"][[1]]
tableList[[1]]["THETA1"][[1]][1]
format(tableList[[1]]["THETA1"][[1]][1], digits = 100)
format(tableList[[1]]["THETA1"][[1]][1], digits = 10)
format(tableList[[1]]["THETA1"][[1]][1], digits = 15)
format(tableList[[1]]["THETA1"][[1]][1], digits = 117)
format(tableList[[1]]["THETA1"][[1]][1], digits = 17)
format(tableList[[1]]["THETA1"][[1]][1], digits = 20)
getwd()
tableList
format(tableList[[1]]["THETA1"][[1]][1], digits = 10)
format(tableList[[1]]["THETA1"][[1]][1], digits = 12)
format(tableList[[1]]["THETA1"][[1]][1], digits = 16)
format(tableList[[1]]["THETA1"][[1]][1], digits = 17)
format(tableList[[1]]["THETA1"][[1]][1], digits = 20)
lala <- -10.368170008720201
format(lala, digits = 20)
?round
lalala <- matrix(c(5.4736965767009212E-02, 2.0860886486773901E-02, 2.0860886486773901E-02, 7.9503245971029955E-03))
lalala
lalala <- matrix(c(5.4736965767009212E-02, 2.0860886486773901E-02, 2.0860886486773901E-02, 7.9503245971029955E-03), nrow = 2)
lalala
kappa(lalala)
eigen(lalala)
lalalaRawres <- matrix(c(0.0547369657670092000000000, 0.0208608864867739000000000, 0.0208608864867739000000000, 0.0079503245971030000000000), nrow=2)
lalalaRawres
eigen(lalalaRawres)
eigen(lalala)
lalala
eigen(round(lalala, digits = 25))
setwd(dismountWD)
roxygenise
roxygenise()
roxygenise()
roxygenise()
roxygenise()
