mean(c(1))
mean(c(1, 2))
mean(c(1, NAN))
mean(c(1, NaN))
mean(c(1, NULL))
mean(c(1, NA))
mean(c(1,2,NULL))
mean(c(1,2,NA))
mean(c(1,2,"NA"))
mean(c(1,2,NaN))
NULL/5
NULL/5
NULL/1.52324
NULL*1.52324
print(NULL)
length(NULL/5)
length(NULL/5)
length(0/5)
length(NULL/5)
rawresInputList <- createRawresInput("run111_FOCEI_8_retry533_LAPLACE.mod", paramsToCompare = c("THETA1","OMEGA(2,2)"), resol = 12, lims1 = c(-10.363,-10.373), lims2 = c(0.00795018,0.00795045))
lala <- "C:\Program Files (x86)\WANdisco\Subversion\Apache2\bin;C:\Program Files (x86)\WANdisco\Subversion;C:\RBuildTools\3.1\bin;C:\RBuildTools\3.1\gcc-4.6.3\bin;C:\Perl64\site\bin;C:\Perl64\bin;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\R\R-3.0.0\library\rJava\jre\bin\client;C:\Program Files (x86)\R\R-3.0.0\library\rJava\jre\bin;C:\Program Files (x86)\R\R-3.0.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\Program Files (x86)\PuTTY\;C:\Program Files\TortoiseSVN\bin;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\Kaspersky Lab\Kaspersky Endpoint Security 10 for Windows\;C:\nm73g64\run\;C:\Program Files (x86)\MiKTeX 2.9\miktex\bin\;C:\Program Files\wkhtmltopdf\bin;C:\nm73g64\run;C:\ProgramData\Monolix\Monolix432s\bin\;C:\Program Files (x86)\Skype\Phone\"
xParamVals
yParamVals
paramsToCompare = c("Param1", "Param2")
zlab = "Z: OFV"
plotTitle = "OFV Surface"
xParamVals <- 1:5
yParamVals <- 1:5
ofvVector
ofvVector <- sapply(expand.grid(yParamVals, xParamVals), function()x{x[1]*x[2]}
ofvVector <- sapply(expand.grid(yParamVals, xParamVals), function(x){x[1]*x[2]}
)
ofvVector <- sapply(expand.grid(yParamVals, xParamVals), function(x){x[1]*x[2]})
ofvVector
expand.grid(yParamVals, xParamVals)
expand.grid(yParamVals, xParamVals)
ofvVector[1]
ofvVector[,1]
ofvVector[1,]
ofvVector[2]
ofvVector[1]
ofvVector["Var1"]
ofvVector
expand.grid(yParamVals, xParamVals)
class(expand.grid(yParamVals, xParamVals))
expand.grid(yParamVals, xParamVals)[[1]]
ofvVector <- sapply(expand.grid(yParamVals, xParamVals), function(x){x[[1]]^2 - x[[2]]^2})
ofvVector`
123123)))))
123123))))))))
ofvVector
ofvVector <- apply(expand.grid(yParamVals, 1, xParamVals), function(x){x[[1]]^2 - x[[2]]^2})
ofvVector <- apply(expand.grid(yParamVals, xParamVals), 1, function(x){x[[1]]^2 - x[[2]]^2})
ofvVector
xSide <- length(xParamVals)
xlab <- paramsToCompare[1]
ySide <- length(yParamVals)
ylab <- paramsToCompare[2]
zMatrix <- matrix(ofvVector, nrow = ySide, ncol = xSide, byrow = TRUE)
colorScaleMid <- list(c(0, "rgb(255,255,255)"),
list(0.2, "rgb(255, 255, 102)"),
list(0.3, "rgb(255, 204, 0)"),
list(0.4, "rgb(255, 153, 0)"),
list(0.5, "rgb(255, 0, 0)"),
list(0.6, "rgb(255, 153, 0)"),
list(0.7, "rgb(255, 204, 0)"),
list(0.8, "rgb(255, 255, 102)"),
list(1, "rgb(255,255,255)"))
colorScaleMidDark <- list(c(0, "rgb(0,0,0)"),
list(0.2, "rgb(80, 0, 0)"),
list(0.3, "rgb(160, 0, 0)"),
list(0.4, "rgb(230, 0, 0)"),
list(0.5, "rgb(255, 0, 0)"),
list(0.6, "rgb(255, 153, 0)"),
list(0.7, "rgb(255, 204, 0)"),
list(0.8, "rgb(255, 255, 102)"),
list(1, "rgb(255,255,255)"))
colorScaleMin <- list(c(0, "rgb(255,0,0)"),
list(0.01, "rgb(200,0,0)"),
list(0.02, "rgb(150,0,0)"),
list(0.03, "rgb(100,0,0)"),
list(0.05, "rgb(50,0,0)"),
list(0.20, "rgb(255,255,255)"),
list(0.75, "rgb(255,255,255)"),
list(1, "rgb(255,255,255)"))
plotlyTrace <- list(z = zMatrix,
x = xParamVals,
y = yParamVals,
colorscale = colorScaleMidDark,
type = "surface"
)
ofvRange <- c(min(ofvVector), max(ofvVector))
layout <- list(
title = plotTitle,
titlefont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 17,
color = "#444"
),
font = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 12,
color = "#444"
),
showlegend = TRUE,
autosize = TRUE,
width = 657,
height = 549,
legend = list(
x = 0.98,
y = 0.5,
traceorder = "normal",
font = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 12,
color = "#444"
),
bgcolor = "rgb(255,255,255)",
bordercolor = "transparent",
borderwidth = 0,
xanchor = "center",
yanchor = "auto"
),
margin = list(
l = 0,
r = 0,
b = 0,
t = 80,
pad = 0,
autoexpand = TRUE
),
paper_bgcolor = "rgb(255,255,255)",
plot_bgcolor = "rgb(229,229,229)",
hovermode = "z",
dragmode = "turntable",
separators = ".,",
scene = list(
xaxis = list(
title = paste("X:", xlab),
titlefont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 14,
color = "rgb(102, 102, 102)"
),
type = "linear",
rangemode = "normal",
autorange = TRUE,
showgrid = TRUE,
zeroline = TRUE,
showline = FALSE,
autotick = TRUE,
nticks = 0,
ticks = "",
showticklabels = TRUE,
tick0 = 0,
dtick = 20,
tickangle = "auto",
tickfont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 12,
color = "rgb(102, 102, 102)"
),
exponentformat = "B",
showexponent = "all",
gridcolor = "rgb(255, 255, 255)",
gridwidth = 2,
zerolinecolor = "#444",
zerolinewidth = 1,
showbackground = FALSE,
showspikes = TRUE,
spikesides = TRUE,
spikethickness = 2
),
yaxis = list(
title = paste("Y:", ylab),
titlefont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 14,
color = "rgb(102, 102, 102)"
),
type = "linear",
rangemode = "normal",
autorange = TRUE,
showgrid = TRUE,
zeroline = TRUE,
showline = FALSE,
autotick = TRUE,
nticks = 0,
ticks = "",
showticklabels = TRUE,
tick0 = 0,
dtick = 20,
tickangle = "auto",
tickfont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 12,
color = "rgb(102, 102, 102)"
),
exponentformat = "B",
showexponent = "all",
gridcolor = "rgb(255, 255, 255)",
gridwidth = 2,
zerolinecolor = "#444",
zerolinewidth = 1,
showbackground = FALSE,
showspikes = TRUE,
spikesides = TRUE,
spikethickness = 2
),
zaxis = list(
title = "Z: OFV",
titlefont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 14,
color = "rgb(102, 102, 102)"
),
range = ofvRange,
type = "linear",
rangemode = "normal",
autorange = FALSE,
showgrid = TRUE,
zeroline = TRUE,
showline = FALSE,
autotick = TRUE,
nticks = 0,
ticks = "",
showticklabels = TRUE,
tick0 = 0,
dtick = 500,
tickangle = "auto",
tickfont = list(
family = "'Open sans', verdana, arial, sans-serif",
size = 12,
color = "rgb(102, 102, 102)"
),
exponentformat = "B",
showexponent = "all",
gridcolor = "rgb(255, 255, 255)",
gridwidth = 2,
zerolinecolor = "#444",
zerolinewidth = 1,
showbackground = FALSE,
showspikes = TRUE,
spikesides = TRUE,
spikethickness = 2
),
cameraposition = list(
c(-0.62049958136, -0.195799695764, -0.19172102932, -0.734769212465), c(-0.0345517705009, 0.0540832558181, -0.0687389292161), 1.825423821),
bgcolor = "rgba(238, 238, 238, 0.2)"
),
hidesources = FALSE
)
data <- list(plotlyTrace)
plotlyObj <- py$plotly(data, kwargs=list(layout=layout))
py
library(plotly)
plotlyObj <- py$plotly(data, kwargs=list(layout=layout))
plotlyAccount
?ggplotly
install.packages("plotly")
install.packages("plotly")
library(plotly)
plotlyUsername
plotlyUsername <- "uppsalahenrik"
plotlyKey
plotlyKey <- "ja9b5copw1"
Sys.setenv("plotly_username" = plotlyUsername)
Sys.setenv("plotly_api_key" = plotlyKey)
?data
getwd()
setwd("C:/Users/hnyberg/Dropbox/Doktorandsaker/PrecondProject/Scripts/dismount")
library(roxygen2)
roxygenize()
modFilePath
url
url <- "https://plot.ly/~UppsalaHenrik/597"
dirName
dirName <- "lala"
paste0(dirName, "_URL", ".txt")
write(url, file = paste0(dirName, "_URL", ".txt"))
